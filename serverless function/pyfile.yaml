apiVersion: v1
data:
  pyfile: "from typing import Any, Dict\r\nfrom datetime import datetime, timedelta\r\n\r\ndef
    handler(event: Dict, context: object) -> Dict[str, Any]:\r\n    def parse_timestamp(ts_str:
    str) -> datetime:\r\n        return datetime.fromisoformat(ts_str)\r\n\r\n    if
    not hasattr(context, 'env'):\r\n        context.env = {}\r\n\r\n    if \"cpu_hist\"
    not in context.env:\r\n        context.env[\"cpu_hist\"] = {}\r\n\r\n    current_time
    = parse_timestamp(event[\"timestamp\"])\r\n\r\n    cpu_usage_map = {}\r\n    for
    k, v in event.items():\r\n        if k.startswith(\"cpu_percent-\"):\r\n            cpu_index
    = k.split(\"-\")[1]\r\n            cpu_usage_map[cpu_index] = float(v)\r\n\r\n
    \   # Step 1: Calculate the percentage of outgoing bytes.\r\n    net_bytes_sent
    = float(event.get(\"net_io_counters_eth0-bytes_sent\", 0.0))\r\n    net_bytes_recv
    = float(event.get(\"net_io_counters_eth0-bytes_recv\", 0.0))\r\n    net_total
    = net_bytes_sent + net_bytes_recv\r\n    percent_network_egress = 0.0\r\n    if
    net_total != 0:\r\n        percent_network_egress = (net_bytes_sent / net_total)
    * 100.0\r\n\r\n    # Step 2: Calculate the percentage of memory used for caching
    (cached + buffers).\r\n    vm_cached = float(event.get(\"virtual_memory-cached\",
    0.0))\r\n    vm_buffers = float(event.get(\"virtual_memory-buffers\", 0.0))\r\n
    \   vm_total = float(event.get(\"virtual_memory-total\", 0.0))\r\n    percent_memory_cache
    = 0.0\r\n    if vm_total != 0:\r\n        percent_memory_cache = ((vm_cached +
    vm_buffers) / vm_total) * 100.0\r\n\r\n    # Step 3: Compute the moving average\r\n
    \   now = current_time\r\n    sixty_seconds_ago = now - timedelta(seconds=60)\r\n\r\n
    \   results = {\r\n        \"percent-network-egress\": percent_network_egress,\r\n
    \       \"percent-memory-caching\": percent_memory_cache\r\n    }\r\n\r\n    for
    cpu_index, usage_value in cpu_usage_map.items():\r\n        if cpu_index not in
    context.env[\"cpu_hist\"]:\r\n            context.env[\"cpu_hist\"][cpu_index]
    = []\r\n\r\n        context.env[\"cpu_hist\"][cpu_index].append((now, usage_value))\r\n\r\n
    \       # Remove data older than 60 seconds.\r\n        history = context.env[\"cpu_hist\"][cpu_index]\r\n
    \       context.env[\"cpu_hist\"][cpu_index] = [\r\n            (t, val) for (t,
    val) in history if t >= sixty_seconds_ago\r\n        ]\r\n\r\n        # Compute
    average CPU usage for the last 60 seconds.\r\n        recent_values = [val for
    (t, val) in context.env[\"cpu_hist\"][cpu_index]]\r\n        avg_cpu_usage = sum(recent_values)
    / len(recent_values) if recent_values else 0.0\r\n\r\n        results[f\"avg-util-cpu{cpu_index}-60sec\"]
    = avg_cpu_usage\r\n\r\n    #print(results)\r\n    return results\r\n\r\n"
kind: ConfigMap
metadata:
  creationTimestamp: "2025-01-19T15:09:26Z"
  name: pyfile
  namespace: default
  resourceVersion: "190003"
  uid: 588ab589-e463-4c4b-aeaf-4101fbc4a789
